import asyncio
from datetime import datetime, date
from aiogram import Bot, Dispatcher, Router, types
from aiogram.enums import ParseMode
from aiogram.client.default import DefaultBotProperties
from aiogram.types import Message
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from db import init_db, add_expense, get_monthly_report
from config import BOT_TOKEN
from db import get_total_for_current_month
from aiogram.filters import Command


router = Router()
scheduler = AsyncIOScheduler()

@router.message(Command("total"))
async def handle_total_command(message: Message):
    total = await get_total_for_current_month(message.from_user.id)
    await message.answer(f"üìä –¢–µ–∫—É—â–∞—è —Å—É–º–º–∞ —Ç—Ä–∞—Ç –∑–∞ {date.today().strftime('%B %Y')}: {total}‚ÇΩ")

@router.message()
async def handle_expense(message: Message):
    try:
        amount = int(message.text.strip())
        await add_expense(message.from_user.id, amount)
        await message.reply(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ: {amount}‚ÇΩ")
    except ValueError:
        await message.reply("‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å —Å—É–º–º—É —Ç—Ä–∞—Ç —á–∏—Å–ª–æ–º, –Ω–∞–ø—Ä–∏–º–µ—Ä: 250")

async def send_monthly_report(bot: Bot):
    today = date.today()
    if today.day != 1:
        return

    user_ids = [123456789]  # –ü–æ–∑–∂–µ –º–æ–∂–Ω–æ —Ö—Ä–∞–Ω–∏—Ç—å –≤ –±–∞–∑–µ —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    for user_id in user_ids:
        year, month = today.year, today.month - 1 or (today.year - 1, 12)
        rows = await get_monthly_report(user_id, year, month)
        if not rows:
            continue
        total = sum(row[1] for row in rows)
        breakdown = "\n".join([f"{row[0]} ‚Äî {row[1]}‚ÇΩ" for row in rows])
        text = f"üìÖ –û—Ç—á—ë—Ç –∑–∞ {month:02d}.{year}:\n\nüí∞ –í—Å–µ–≥–æ: {total}‚ÇΩ\n\n{breakdown}"
        await bot.send_message(user_id, text)

async def main():
    await init_db()

    bot = Bot(
        token=BOT_TOKEN,
        default=DefaultBotProperties(parse_mode=ParseMode.HTML)
    )
    dp = Dispatcher()
    dp.include_router(router)

    # –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 00:00, –Ω–æ –æ—Ç—á—ë—Ç —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ 1-–µ —á–∏—Å–ª–æ
    scheduler.add_job(send_monthly_report, 'cron', hour=0, minute=0, args=[bot])
    scheduler.start()

    print("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
